{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Real World DRF Example of a real world project that use django rest framework (DRF). This project first commit was built with cookiecutter-django-rest but after that some changes where made: New Auth Endpoints: A new set of REST API endpoints for Authentication and Registration with django-rest-auth . JSON Web Tokens: Use djangorestframework-jwt for generate JWT. Sending Emails & Social Authentication: Use django-allauth for logging with social media accounts, and send \"email confirmation\" / \"password reset\" emails. It has also been configurated the use of email/password for login, and emails' templates have been created for the email confirmation and password reset functions. Check out the project's documentation Prerequisites Docker Travis CLI Heroku CLI Local Development Create a superuser to login to the admin: docker-compose run --rm web ./manage.py createsuperuser Start the dev server for local development: docker-compose up Run a command inside the docker container: docker-compose run --rm web [command] Continuous Deployment Deployment is automated via Travis. When builds pass on the master or qa branch, Travis will deploy that branch to Heroku. Follow these steps to enable this feature. Initialize the production server: heroku create real-world-drf-prod --remote prod && \\ heroku addons:create newrelic:wayne --app real-world-drf-prod && \\ heroku addons:create heroku-postgresql:hobby-dev --app real-world-drf-prod && \\ heroku config:set DJANGO_SECRET_KEY=`openssl rand -base64 32` \\ DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\ DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\ DJANGO_AWS_STORAGE_BUCKET_NAME=\"real-world-drf-prod\" \\ DJANGO_CONFIGURATION=\"Production\" \\ DJANGO_SETTINGS_MODULE=\"backend.config\" \\ --app real-world-drf-prod You can see the result in https://real-world-drf-prod.herokuapp.com Initialize the qa server: heroku create real-world-drf-qa --remote qa && \\ heroku addons:create newrelic:wayne --app real-world-drf-qa && \\ heroku addons:create heroku-postgresql:hobby-dev --app real-world-drf-qa && \\ heroku config:set DJANGO_SECRET_KEY=`openssl rand -base64 32` \\ DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\ DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\ DJANGO_AWS_STORAGE_BUCKET_NAME=\"real-world-drf-qa\" \\ DJANGO_CONFIGURATION=\"Production\" \\ DJANGO_SETTINGS_MODULE=\"backend.config\" \\ --app real-world-drf-qa You can see the result in https://real-world-drf-qa.herokuapp.com Securely add your Heroku credentials to Travis so that it can automatically deploy your changes (You can also edit project settings in the travis website for add a new environment variable): travis encrypt HEROKU_API_KEY=\"add you heroku api key here\" --add && \\ travis encrypt HEROKU_AUTH_TOKEN=\"$(heroku auth:token)\" --add Commit your changes and push to master and qa to trigger your first deploys: git commit -a -m \"ci(travis): first deploy\" && \\ git push origin master:qa && \\ git push origin master You're now ready to continuously ship! \u2728 \ud83d\udef3","title":"Home"},{"location":"#real-world-drf","text":"Example of a real world project that use django rest framework (DRF). This project first commit was built with cookiecutter-django-rest but after that some changes where made: New Auth Endpoints: A new set of REST API endpoints for Authentication and Registration with django-rest-auth . JSON Web Tokens: Use djangorestframework-jwt for generate JWT. Sending Emails & Social Authentication: Use django-allauth for logging with social media accounts, and send \"email confirmation\" / \"password reset\" emails. It has also been configurated the use of email/password for login, and emails' templates have been created for the email confirmation and password reset functions. Check out the project's documentation","title":"Real World DRF"},{"location":"#prerequisites","text":"Docker Travis CLI Heroku CLI","title":"Prerequisites"},{"location":"#local-development","text":"Create a superuser to login to the admin: docker-compose run --rm web ./manage.py createsuperuser Start the dev server for local development: docker-compose up Run a command inside the docker container: docker-compose run --rm web [command]","title":"Local Development"},{"location":"#continuous-deployment","text":"Deployment is automated via Travis. When builds pass on the master or qa branch, Travis will deploy that branch to Heroku. Follow these steps to enable this feature. Initialize the production server: heroku create real-world-drf-prod --remote prod && \\ heroku addons:create newrelic:wayne --app real-world-drf-prod && \\ heroku addons:create heroku-postgresql:hobby-dev --app real-world-drf-prod && \\ heroku config:set DJANGO_SECRET_KEY=`openssl rand -base64 32` \\ DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\ DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\ DJANGO_AWS_STORAGE_BUCKET_NAME=\"real-world-drf-prod\" \\ DJANGO_CONFIGURATION=\"Production\" \\ DJANGO_SETTINGS_MODULE=\"backend.config\" \\ --app real-world-drf-prod You can see the result in https://real-world-drf-prod.herokuapp.com Initialize the qa server: heroku create real-world-drf-qa --remote qa && \\ heroku addons:create newrelic:wayne --app real-world-drf-qa && \\ heroku addons:create heroku-postgresql:hobby-dev --app real-world-drf-qa && \\ heroku config:set DJANGO_SECRET_KEY=`openssl rand -base64 32` \\ DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\ DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\ DJANGO_AWS_STORAGE_BUCKET_NAME=\"real-world-drf-qa\" \\ DJANGO_CONFIGURATION=\"Production\" \\ DJANGO_SETTINGS_MODULE=\"backend.config\" \\ --app real-world-drf-qa You can see the result in https://real-world-drf-qa.herokuapp.com Securely add your Heroku credentials to Travis so that it can automatically deploy your changes (You can also edit project settings in the travis website for add a new environment variable): travis encrypt HEROKU_API_KEY=\"add you heroku api key here\" --add && \\ travis encrypt HEROKU_AUTH_TOKEN=\"$(heroku auth:token)\" --add Commit your changes and push to master and qa to trigger your first deploys: git commit -a -m \"ci(travis): first deploy\" && \\ git push origin master:qa && \\ git push origin master You're now ready to continuously ship! \u2728 \ud83d\udef3","title":"Continuous Deployment"},{"location":"api/authentication/","text":"Authentication For this functionality we use django-rest-auth , djangorestframework-jwt and django-allauth . For clients to authenticate, the JSON Web Token (JWT) should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Bearer\", with whitespace separating the two strings (see JWT_AUTH_HEADER_PREFIX configuration). For example: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Bearer The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/users/ -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c' Retrieving Tokens (Login) Authorization tokens are issued and returned when a user registers (/api/v1/rest-auth/registration/). A registered user can also retrieve their token with the following request: Request : POST /api/v1/rest-auth/login/ Parameters: Name Type Description email string The user's email password string The user's password Response : { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"user\": { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"About me...\", \"account_verified\": true } } Delete Tokens (Logout) This method does not work well. Ref: https://bit.ly/2QyNXtm & https://bit.ly/2Keyeib Request : POST /api/v1/rest-auth/logout/ Parameters: Name Type Description key string The user's JSON Web Token Response : { \"detail\": \"Successfully logged out.\" } Reset Password Description Request : POST /api/v1/rest-auth/password/reset/ Parameters: Name Type Description email string The user's email Response : { \"detail\": \"Password reset e-mail has been sent.\" } Reset Password (confirmation) Description Request : POST /api/v1/rest-auth/password/reset/confirm/ Parameters: Name Type Description new_password1 string The user's new password new_password2 string The user's new password (confirmation) uid string uid send by email token string token send by email Response : { \"detail\": \"Password has been reset with the new password.\" } Change Password Description Request : POST /api/v1/rest-auth/password/change/ Parameters: Name Type Description new_password1 string The user's new password new_password2 string The user's new password (confirmation) old_password string The user's old password Note: Authorization Protected Response : { \"detail\": \"New password has been saved.\" } Facebook Login Description Request : POST /api/v1/rest-auth/facebook/ Parameters: Name Type Description access_token string access token. code string code. Note: Authorization Protected Response : Content-Type application/json 200 OK { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"user\": { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"About me...\", \"account_verified\": true } }","title":"Authentication"},{"location":"api/authentication/#authentication","text":"For this functionality we use django-rest-auth , djangorestframework-jwt and django-allauth . For clients to authenticate, the JSON Web Token (JWT) should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Bearer\", with whitespace separating the two strings (see JWT_AUTH_HEADER_PREFIX configuration). For example: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Bearer The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/users/ -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'","title":"Authentication"},{"location":"api/authentication/#retrieving-tokens-login","text":"Authorization tokens are issued and returned when a user registers (/api/v1/rest-auth/registration/). A registered user can also retrieve their token with the following request: Request : POST /api/v1/rest-auth/login/ Parameters: Name Type Description email string The user's email password string The user's password Response : { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"user\": { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"About me...\", \"account_verified\": true } }","title":"Retrieving Tokens (Login)"},{"location":"api/authentication/#delete-tokens-logout","text":"This method does not work well. Ref: https://bit.ly/2QyNXtm & https://bit.ly/2Keyeib Request : POST /api/v1/rest-auth/logout/ Parameters: Name Type Description key string The user's JSON Web Token Response : { \"detail\": \"Successfully logged out.\" }","title":"Delete Tokens (Logout)"},{"location":"api/authentication/#reset-password","text":"Description Request : POST /api/v1/rest-auth/password/reset/ Parameters: Name Type Description email string The user's email Response : { \"detail\": \"Password reset e-mail has been sent.\" }","title":"Reset Password"},{"location":"api/authentication/#reset-password-confirmation","text":"Description Request : POST /api/v1/rest-auth/password/reset/confirm/ Parameters: Name Type Description new_password1 string The user's new password new_password2 string The user's new password (confirmation) uid string uid send by email token string token send by email Response : { \"detail\": \"Password has been reset with the new password.\" }","title":"Reset Password (confirmation)"},{"location":"api/authentication/#change-password","text":"Description Request : POST /api/v1/rest-auth/password/change/ Parameters: Name Type Description new_password1 string The user's new password new_password2 string The user's new password (confirmation) old_password string The user's old password Note: Authorization Protected Response : { \"detail\": \"New password has been saved.\" }","title":"Change Password"},{"location":"api/authentication/#facebook-login","text":"Description Request : POST /api/v1/rest-auth/facebook/ Parameters: Name Type Description access_token string access token. code string code. Note: Authorization Protected Response : Content-Type application/json 200 OK { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"user\": { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"About me...\", \"account_verified\": true } }","title":"Facebook Login"},{"location":"api/users/","text":"Users Supports registering, viewing, and updating user accounts. Register a new user account Request : POST /api/v1/rest-auth/registration/ Parameters: Name Type Required Description email string No The user's email address. first_name string No The user's given name. last_name string No The user's family name. password1 string Yes The password for the new user account. password2 string Yes The password for the new user account. Note: Not Authorization Protected Response : Content-Type application/json 201 Created { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"user\": { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": null, \"account_verified\": true } } The token returned with this response should be stored by the client for authenticating future requests to the API. See Authentication . Verify Email Description Request : POST /api/v1/rest-auth/registration/verify-email/ Parameters: Name Type Description key string The user's key send by email Response : { \"detail\": \"ok\" } Get current user's profile information We can get the current user profile with the JSON Web Token header (this endpoint support PUT, PATCH methods as well) Request : GET /api/v1/rest-auth/user/ Parameters: (none) Note: Authorization Protected Response : { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"About me...\", \"account_verified\": true } Get a user's profile information Request : GET /users/:id Parameters: Note: Authorization Protected Response : Content-Type application/json 200 OK { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"About me...\", \"account_verified\": true } Update profile information Request : PUT/PATCH /users/:id Parameters: Name Type Description first_name string The first_name of the user object. last_name string The last_name of the user object. email string The user's email address. about string The user's description. Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"New info...\", \"account_verified\": true }","title":"Users"},{"location":"api/users/#users","text":"Supports registering, viewing, and updating user accounts.","title":"Users"},{"location":"api/users/#register-a-new-user-account","text":"Request : POST /api/v1/rest-auth/registration/ Parameters: Name Type Required Description email string No The user's email address. first_name string No The user's given name. last_name string No The user's family name. password1 string Yes The password for the new user account. password2 string Yes The password for the new user account. Note: Not Authorization Protected Response : Content-Type application/json 201 Created { \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"user\": { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": null, \"account_verified\": true } } The token returned with this response should be stored by the client for authenticating future requests to the API. See Authentication .","title":"Register a new user account"},{"location":"api/users/#verify-email","text":"Description Request : POST /api/v1/rest-auth/registration/verify-email/ Parameters: Name Type Description key string The user's key send by email Response : { \"detail\": \"ok\" }","title":"Verify Email"},{"location":"api/users/#get-current-users-profile-information","text":"We can get the current user profile with the JSON Web Token header (this endpoint support PUT, PATCH methods as well) Request : GET /api/v1/rest-auth/user/ Parameters: (none) Note: Authorization Protected Response : { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"About me...\", \"account_verified\": true }","title":"Get current user's profile information"},{"location":"api/users/#get-a-users-profile-information","text":"Request : GET /users/:id Parameters: Note: Authorization Protected Response : Content-Type application/json 200 OK { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"About me...\", \"account_verified\": true }","title":"Get a user's profile information"},{"location":"api/users/#update-profile-information","text":"Request : PUT/PATCH /users/:id Parameters: Name Type Description first_name string The first_name of the user object. last_name string The last_name of the user object. email string The user's email address. about string The user's description. Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"id\": 48, \"username\": \"john\", \"email\": \"johndoe@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"about\": \"New info...\", \"account_verified\": true }","title":"Update profile information"}]}